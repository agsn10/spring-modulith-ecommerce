package com.app.example.invoice.infra.listener;

import com.app.example.invoice.domain.event.InvoiceGenerated;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import org.springframework.transaction.event.TransactionalEventListener;
import org.springframework.transaction.event.TransactionPhase;

/**
 * Listener para eventos relacionados √† gera√ß√£o de faturas.
 *
 * Esse listener ser√° acionado somente ap√≥s a transa√ß√£o da cria√ß√£o da fatura
 * ter sido comitada com sucesso.
 *
 * Respons√°vel por executar l√≥gica de p√≥s-processamento relacionada √† gera√ß√£o
 * de faturas, como notifica√ß√µes ou integra√ß√µes com outros sistemas.
 *
 * @author <a href="mailto:agsn10@hotmail.com">Antonio Neto</a>
 */
@Slf4j
@Component
public class InvoiceEventListener {

    /**
     * Manipula o evento {@link InvoiceGenerated} de forma ass√≠ncrona ap√≥s o commit da transa√ß√£o.
     * <p>
     * Este m√©todo ser√° executado em uma thread separada para n√£o impactar a performance da transa√ß√£o principal.
     * Ideal para atividades que n√£o precisam ocorrer de forma s√≠ncrona, como:
     * <ul>
     *   <li>Envio de e-mails de confirma√ß√£o de fatura</li>
     *   <li>Notifica√ß√µes a outros microsservi√ßos</li>
     *   <li>Registro de auditoria ou logs</li>
     * </ul>
     *
     * @param event evento de fatura gerada contendo informa√ß√µes como ID da fatura, ID do pedido e data de gera√ß√£o.
     */
    @Async("eventTaskExecutor")
    @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)
    public void handleInvoiceGenerated(InvoiceGenerated event) {
        log.info("üßæ Fatura gerada: invoiceId={}, orderId={}, data={}",
                event.invoiceId(), event.orderId(), event.generatedAt());

        // Aqui voc√™ pode realizar a√ß√µes como:
        // - Enviar e-mail de notifica√ß√£o
        // - Publicar evento para outro microservi√ßo
        // - Gravar log de auditoria, etc.
    }
}
